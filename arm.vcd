$date
	Tue Nov 24 17:13:21 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # DataAdr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & WriteData [31:0] $end
$var wire 32 ' ReadData [31:0] $end
$var wire 32 ( PC [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 ) Instr [31:0] $end
$var wire 32 * DataAdr [31:0] $end
$scope module arm $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 + WriteData [31:0] $end
$var wire 1 , RegWrite $end
$var wire 2 - RegSrc [1:0] $end
$var wire 1 . RegByte $end
$var wire 32 / ReadData [31:0] $end
$var wire 1 0 PCSrc $end
$var wire 32 1 PC [31:0] $end
$var wire 1 2 MemtoReg $end
$var wire 1 " MemWrite $end
$var wire 32 3 Instr [31:0] $end
$var wire 2 4 ImmSrc [1:0] $end
$var wire 1 5 ALUSrc $end
$var wire 32 6 ALUResult [31:0] $end
$var wire 4 7 ALUFlags [3:0] $end
$var wire 3 8 ALUControl [2:0] $end
$scope module c $end
$var wire 20 9 Instr [31:12] $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 , RegWrite $end
$var wire 1 : RegW $end
$var wire 2 ; RegSrc [1:0] $end
$var wire 1 . RegByte $end
$var wire 1 0 PCSrc $end
$var wire 1 < PCS $end
$var wire 1 2 MemtoReg $end
$var wire 1 " MemWrite $end
$var wire 1 = MemW $end
$var wire 2 > ImmSrc [1:0] $end
$var wire 2 ? FlagW [1:0] $end
$var wire 1 5 ALUSrc $end
$var wire 4 @ ALUFlags [3:0] $end
$var wire 3 A ALUControl [2:0] $end
$scope module cl $end
$var wire 4 B Cond [3:0] $end
$var wire 2 C FlagWrite [1:0] $end
$var wire 1 " MemWrite $end
$var wire 1 0 PCSrc $end
$var wire 1 , RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 : RegW $end
$var wire 1 < PCS $end
$var wire 1 = MemW $end
$var wire 4 D Flags [3:0] $end
$var wire 2 E FlagW [1:0] $end
$var wire 1 F CondEx $end
$var wire 4 G ALUFlags [3:0] $end
$scope module cc $end
$var wire 4 H Cond [3:0] $end
$var wire 4 I Flags [3:0] $end
$var wire 1 J ge $end
$var wire 1 K zero $end
$var wire 1 L overflow $end
$var wire 1 M neg $end
$var wire 1 N carry $end
$var reg 1 F CondEx $end
$upscope $end
$scope module flagreg0 $end
$var wire 1 $ clk $end
$var wire 2 O d [1:0] $end
$var wire 1 P en $end
$var wire 1 % reset $end
$var reg 2 Q q [1:0] $end
$upscope $end
$scope module flagreg1 $end
$var wire 1 $ clk $end
$var wire 2 R d [1:0] $end
$var wire 1 S en $end
$var wire 1 % reset $end
$var reg 2 T q [1:0] $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 6 U Funct [5:0] $end
$var wire 2 V Op [1:0] $end
$var wire 1 < PCS $end
$var wire 4 W Rd [3:0] $end
$var wire 1 : RegW $end
$var wire 2 X RegSrc [1:0] $end
$var wire 1 . RegByte $end
$var wire 1 2 MemtoReg $end
$var wire 1 = MemW $end
$var wire 2 Y ImmSrc [1:0] $end
$var wire 1 Z Branch $end
$var wire 1 5 ALUSrc $end
$var wire 1 [ ALUOp $end
$var reg 3 \ ALUControl [2:0] $end
$var reg 2 ] FlagW [1:0] $end
$var reg 11 ^ controls [10:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 3 _ ALUControl [2:0] $end
$var wire 1 5 ALUSrc $end
$var wire 2 ` ImmSrc [1:0] $end
$var wire 1 2 MemtoReg $end
$var wire 1 0 PCSrc $end
$var wire 1 . RegByte $end
$var wire 2 a RegSrc [1:0] $end
$var wire 1 , RegWrite $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 8 b byteResult [7:0] $end
$var wire 32 c WriteData [31:0] $end
$var wire 32 d SrcB [31:0] $end
$var wire 32 e SrcA [31:0] $end
$var wire 32 f Result [31:0] $end
$var wire 32 g ReadData [31:0] $end
$var wire 4 h RA2 [3:0] $end
$var wire 4 i RA1 [3:0] $end
$var wire 32 j PCPlus8 [31:0] $end
$var wire 32 k PCPlus4 [31:0] $end
$var wire 32 l PCNext [31:0] $end
$var wire 32 m PC [31:0] $end
$var wire 32 n MenResult [31:0] $end
$var wire 32 o Instr [31:0] $end
$var wire 32 p ExtImm [31:0] $end
$var wire 32 q ALUResult [31:0] $end
$var wire 4 r ALUFlags [3:0] $end
$scope module alu $end
$var wire 3 s ALUControl [2:0] $end
$var wire 1 t carry $end
$var wire 1 u overflow $end
$var wire 1 v zero $end
$var wire 33 w sum [32:0] $end
$var wire 1 x negative $end
$var wire 32 y b [31:0] $end
$var wire 32 z a [31:0] $end
$var wire 4 { ALUFlags [3:0] $end
$var reg 32 | Result [31:0] $end
$upscope $end
$scope module ext $end
$var wire 2 } ImmSrc [1:0] $end
$var wire 24 ~ Instr [23:0] $end
$var reg 32 !" ExtImm [31:0] $end
$upscope $end
$scope module muxlbr $end
$var wire 8 "" d0 [7:0] $end
$var wire 8 #" d1 [7:0] $end
$var wire 8 $" d2 [7:0] $end
$var wire 8 %" d3 [7:0] $end
$var wire 2 &" s [1:0] $end
$var wire 8 '" y [7:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 (" b [31:0] $end
$var wire 32 )" y [31:0] $end
$var wire 32 *" a [31:0] $end
$upscope $end
$scope module pcadd2 $end
$var wire 32 +" a [31:0] $end
$var wire 32 ," b [31:0] $end
$var wire 32 -" y [31:0] $end
$upscope $end
$scope module pcmux $end
$var wire 32 ." d0 [31:0] $end
$var wire 1 0 s $end
$var wire 32 /" y [31:0] $end
$var wire 32 0" d1 [31:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 $ clk $end
$var wire 32 1" d [31:0] $end
$var wire 1 % reset $end
$var reg 32 2" q [31:0] $end
$upscope $end
$scope module prevmux $end
$var wire 32 3" d0 [31:0] $end
$var wire 1 2 s $end
$var wire 32 4" y [31:0] $end
$var wire 32 5" d1 [31:0] $end
$upscope $end
$scope module ra1mux $end
$var wire 4 6" d0 [3:0] $end
$var wire 4 7" d1 [3:0] $end
$var wire 1 8" s $end
$var wire 4 9" y [3:0] $end
$upscope $end
$scope module ra2mux $end
$var wire 4 :" d0 [3:0] $end
$var wire 4 ;" d1 [3:0] $end
$var wire 1 <" s $end
$var wire 4 =" y [3:0] $end
$upscope $end
$scope module resmux $end
$var wire 32 >" d0 [31:0] $end
$var wire 32 ?" d1 [31:0] $end
$var wire 1 . s $end
$var wire 32 @" y [31:0] $end
$upscope $end
$scope module rf $end
$var wire 1 $ clk $end
$var wire 32 A" r15 [31:0] $end
$var wire 4 B" ra1 [3:0] $end
$var wire 4 C" ra2 [3:0] $end
$var wire 4 D" wa3 [3:0] $end
$var wire 32 E" wd3 [31:0] $end
$var wire 1 , we3 $end
$var wire 32 F" rd2 [31:0] $end
$var wire 32 G" rd1 [31:0] $end
$upscope $end
$scope module srcbmux $end
$var wire 32 H" d0 [31:0] $end
$var wire 32 I" d1 [31:0] $end
$var wire 1 5 s $end
$var wire 32 J" y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 K" a [31:0] $end
$var wire 1 $ clk $end
$var wire 32 L" rd [31:0] $end
$var wire 32 M" wd [31:0] $end
$var wire 1 " we $end
$upscope $end
$scope module imem $end
$var wire 32 N" a [31:0] $end
$var wire 32 O" rd [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11100000010011110000000000001111 O"
b0 N"
b1000 M"
bx L"
b0 K"
b1000 J"
b1111 I"
b1000 H"
b1000 G"
b1000 F"
b0 E"
b0 D"
b1111 C"
b1111 B"
b1000 A"
b0 @"
b0xxxxxxxx ?"
b0 >"
b1111 ="
0<"
b0 ;"
b1111 :"
b1111 9"
08"
b1111 7"
b1111 6"
bx 5"
b0 4"
b0 3"
b0 2"
b100 1"
b0 0"
b100 /"
b100 ."
b1000 -"
b100 ,"
b100 +"
b0 *"
b100 )"
b100 ("
bx '"
b0 &"
bx %"
bx $"
bx #"
bx ""
b1111 !"
b10011110000000000001111 ~
b0 }
b0 |
b110 {
b1000 z
b1000 y
0x
b100000000000000000000000000000000 w
1v
0u
1t
b1 s
b110 r
b0 q
b1111 p
b11100000010011110000000000001111 o
b0 n
b0 m
b100 l
b100 k
b1000 j
b1111 i
b1111 h
bx g
b0 f
b1000 e
b1000 d
b1000 c
bx b
b0 a
b0 `
b1 _
b10010 ^
b0 ]
b1 \
1[
0Z
b0 Y
b0 X
b0 W
b0 V
b100 U
b0 T
0S
b1 R
b0 Q
0P
b10 O
0N
0M
0L
0K
1J
b0 I
b1110 H
b110 G
1F
b0 E
b0 D
b0 C
b1110 B
b1 A
b110 @
b0 ?
b0 >
0=
0<
b0 ;
1:
b11100000010011110000 9
b1 8
b110 7
b0 6
05
b0 4
b11100000010011110000000000001111 3
02
b0 1
00
bx /
0.
b0 -
1,
b1000 +
b0 *
b11100000010011110000000000001111 )
b0 (
bx '
b1000 &
1%
1$
b0 #
0"
b1000 !
$end
#5
0$
#10
1$
#15
0$
#20
1$
#22
0%
#25
0$
#30
b0 O
b11 &"
0t
0x
15
b0 8
b0 A
b0 \
b0 _
b0 s
b1010010 ^
b11111111 f
b11111111 0"
b11111111 @"
b11111111 E"
b11111111 p
b11111111 !"
b11111111 I"
b0 i
b0 9"
b0 B"
b101000 U
b1 W
b0 R
b11111111 n
b11111111 4"
b11111111 >"
b100000000001000011111111 ~
b1 D"
b1 ;"
b0 6"
b11100010100000000001 9
b0 7
b0 @
b0 G
b0 r
b0 {
0v
b11111111 #
b11111111 *
b11111111 6
b11111111 q
b11111111 |
b11111111 3"
b11111111 K"
b11111111 d
b11111111 y
b11111111 J"
b11100010100000000001000011111111 )
b11100010100000000001000011111111 3
b11100010100000000001000011111111 o
b11100010100000000001000011111111 O"
b11111111 w
b0 e
b0 z
b0 G"
b1100 !
b1100 &
b1100 +
b1100 c
b1100 F"
b1100 H"
b1100 M"
b1000 l
b1000 /"
b1000 1"
b1100 j
b1100 -"
b1100 A"
b1000 k
b1000 )"
b1000 +"
b1000 ."
b100 (
b100 1
b100 m
b100 *"
b100 2"
b100 N"
1$
#35
0$
#40
b111111110 f
b111111110 0"
b111111110 @"
b111111110 E"
b111111110 n
b111111110 4"
b111111110 >"
b10 &"
b111111110 #
b111111110 *
b111111110 6
b111111110 q
b111111110 |
b111111110 3"
b111111110 K"
05
b11111111 d
b11111111 y
b11111111 J"
b111111110 w
b11111111 e
b11111111 z
b11111111 G"
b10010 ^
b1 p
b1 !"
b1 I"
b1 h
b1 ="
b1 C"
b1 i
b1 9"
b1 B"
b1000 U
b10 W
b100000010010000000000001 ~
b10 D"
b10 ;"
b1 :"
b1 6"
b11100000100000010010 9
b11100000100000010010000000000001 )
b11100000100000010010000000000001 3
b11100000100000010010000000000001 o
b11100000100000010010000000000001 O"
b11111111 !
b11111111 &
b11111111 +
b11111111 c
b11111111 F"
b11111111 H"
b11111111 M"
b1100 l
b1100 /"
b1100 1"
b10000 j
b10000 -"
b10000 A"
b1100 k
b1100 )"
b1100 +"
b1100 ."
b1000 (
b1000 1
b1000 m
b1000 *"
b1000 2"
b1000 N"
1$
#45
0$
#50
b0 O
0u
b0 R
b0 7
b0 @
b0 G
b0 r
b0 {
0x
bx f
bx 0"
bx @"
bx E"
b0 &"
1<"
bx n
bx 4"
bx >"
0,
1"
b11000100 d
b11000100 y
b11000100 J"
b11000100 #
b11000100 *
b11000100 6
b11000100 q
b11000100 |
b11000100 3"
b11000100 K"
b10 -
b10 ;
b10 X
b10 a
b1 4
b1 >
b1 Y
b1 `
b1 }
15
12
0:
1=
0[
b111111110 !
b111111110 &
b111111110 +
b111111110 c
b111111110 F"
b111111110 H"
b111111110 M"
b11000100 w
b0 e
b0 z
b0 G"
b0 8
b0 A
b0 \
b0 _
b0 s
b10011101000 ^
b11000100 p
b11000100 !"
b11000100 I"
b10 h
b10 ="
b10 C"
b0 i
b0 9"
b0 B"
b1 V
b11000 U
b100000000010000011000100 ~
b100 :"
b0 6"
b11100101100000000010 9
b11100101100000000010000011000100 )
b11100101100000000010000011000100 3
b11100101100000000010000011000100 o
b11100101100000000010000011000100 O"
b10000 l
b10000 /"
b10000 1"
b10100 j
b10100 -"
b10100 A"
b10000 k
b10000 )"
b10000 +"
b10000 ."
b1100 (
b1100 1
b1100 m
b1100 *"
b1100 2"
b1100 N"
1$
#55
0$
